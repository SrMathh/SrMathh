from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
import time
import os
import sys
import subprocess
import requests
import shutil 
from datetime import datetime
from dotenv import load_dotenv
import pyautogui

from datetime import datetime

# Gera o nome do arquivo de log com data e hora do momento da execu√ß√£o
log_filename = datetime.now().strftime("testeAutomatico,%d-%m.%H-%M.log")

def log_message(message):
    """
    Registra uma mensagem no log e imprime no console sem erros de codifica√ß√£o.
    """

    # Substituir emojis por texto alternativo caso a codifica√ß√£o falhe
    replacements = {
        "‚úÖ": "[OK]",
        "‚ö†Ô∏è": "[ALERTA]",
        "‚ùå": "[ERRO]",
        "‚è≥": "[AGUARDANDO]",
        "üöÄ": "[INICIANDO]",
        "üîç": "[VERIFICANDO]",
        "üîß": "[CONFIGURANDO]"
    }

    for emoji, replacement in replacements.items():
        message = message.replace(emoji, replacement)

    # For√ßa a sa√≠da no console para UTF-8
    try:
        print(message.encode(sys.stdout.encoding, errors='replace').decode(sys.stdout.encoding))
    except UnicodeEncodeError:
        print(message.encode("utf-8", "ignore").decode("utf-8"))  # Se der erro, ignora caracteres inv√°lidos

    # Salvar no arquivo de log com UTF-8 para evitar erros ao ler depois
    with open("log.txt", "a", encoding="utf-8") as log_file:
        log_file.write(message + "\n")


def fill_field(driver, identifier, identifier_type, value, action_name="", timeout=20):
    """
    Localiza um campo de input e preenche com um valor.

    Par√¢metros:
    - driver (WebDriver): Inst√¢ncia do Selenium WebDriver.
    - identifier (str): Identificador do campo (exemplo: ID ou XPath).
    - identifier_type (str): Tipo do identificador ('id', 'xpath', 'class_name', etc.).
    - value (str): Texto a ser inserido no campo.
    - action_name (str, opcional): Nome da a√ß√£o para fins de log.
    - timeout (int, opcional): Tempo m√°ximo de espera pelo elemento (padr√£o: 20 segundos).

    Retorno:
    - Nenhum. Apenas preenche o campo de input.
    """

    start_time = time.time()  # Marca o tempo de in√≠cio da execu√ß√£o

    try:
        # Verifica se o valor passado √© uma string
        if not isinstance(value, str):
            raise ValueError(f"‚ùå Esperado um valor de texto (string), mas recebeu {type(value).__name__}")

        # Dicion√°rio para mapear os tipos de identificadores do Selenium
        by_type = {
            'id': By.ID,
            'xpath': By.XPATH,
            'class_name': By.CLASS_NAME,
            'css_selector': By.CSS_SELECTOR,
            'link_text': By.LINK_TEXT,
        }

        # Verifica se o tipo de identificador fornecido √© v√°lido
        if identifier_type not in by_type:
            raise ValueError(f"‚ùå Tipo de identificador '{identifier_type}' n√£o √© suportado.")

        wait = WebDriverWait(driver, timeout)  # Define o tempo m√°ximo de espera

        # Aguarda at√© que o campo esteja presente na p√°gina
        element = wait.until(EC.presence_of_element_located((by_type[identifier_type], identifier)))

        # Aguarda at√© que o campo esteja clic√°vel
        wait.until(EC.element_to_be_clickable((by_type[identifier_type], identifier)))

        # Limpa o campo antes de inserir um novo valor
        element.clear()
        time.sleep(1)  # Pequeno atraso para garantir que o campo esteja pronto

        # Insere o texto no campo de input
        element.send_keys(value)

    except TimeoutException:
        log_message(f"‚ùå Erro: O elemento com {identifier_type} '{identifier}' n√£o foi encontrado ap√≥s {timeout} segundos.")

    except NoSuchElementException:
        log_message(f"‚ùå Erro: O elemento com {identifier_type} '{identifier}' n√£o foi encontrado.")

    except ValueError as ve:
        log_message(f"‚ùå Erro de valor: {ve}")

    except Exception as e:
        log_message(f"‚ùå Ocorreu um erro inesperado: {e}")

    finally:
        execution_time = time.time() - start_time
        log_message(f"‚è≥ A√ß√£o '{action_name}' conclu√≠da em {execution_time:.2f} segundos.")


def click_element(driver, identifier, identifier_type, action_name="", timeout=20):
    """
    Localiza um elemento na p√°gina e realiza um clique, baseado no tipo de identificador.

    Par√¢metros:
    - driver (WebDriver): Inst√¢ncia do Selenium WebDriver.
    - identifier (str): O valor do identificador do elemento (ex: ID ou XPath).
    - identifier_type (str): O tipo do identificador ('id', 'xpath', 'class_name', etc.).
    - action_name (str, opcional): Nome da a√ß√£o para log.
    - timeout (int, opcional): Tempo m√°ximo de espera pelo elemento (padr√£o: 20 segundos).

    Retorno:
    - Nenhum. Apenas realiza o clique no elemento.
    """

    start_time = time.time()  # Marca o in√≠cio da execu√ß√£o

    try:
        wait = WebDriverWait(driver, timeout)  # Configura tempo m√°ximo de espera para encontrar o elemento

        # Dicion√°rio para mapear os tipos de identificadores do Selenium
        by_type = {
            'id': By.ID,
            'xpath': By.XPATH,
            'class_name': By.CLASS_NAME,
            'css_selector': By.CSS_SELECTOR,
            'link_text': By.LINK_TEXT,
        }

        # Verifica se o tipo de identificador fornecido √© v√°lido
        if identifier_type not in by_type:
            raise ValueError(f"‚ùå Tipo de identificador '{identifier_type}' n√£o √© suportado.")

        # Aguarda at√© que o elemento esteja clic√°vel na p√°gina
        element = wait.until(EC.element_to_be_clickable((by_type[identifier_type], identifier)))

        time.sleep(1)  # Pequeno delay para garantir que o elemento esteja pronto para intera√ß√£o
        element.click()  # Realiza o clique no elemento

    except TimeoutException:
        # Se o tempo limite for atingido e o elemento n√£o for encontrado
        log_message(f"‚ùå Erro: O elemento com {identifier_type} '{identifier}' n√£o foi encontrado ap√≥s {timeout} segundos.")

    except NoSuchElementException:
        # Se o elemento n√£o existir na p√°gina
        log_message(f"‚ùå Erro: O elemento com {identifier_type} '{identifier}' n√£o foi encontrado.")

    except Exception as e:
        # Captura qualquer erro inesperado
        log_message(f"‚ùå Erro inesperado: {e}")

    finally:
        # Calcula e exibe o tempo total da execu√ß√£o
        execution_time = time.time() - start_time
        log_message(f"‚è≥ A√ß√£o '{action_name}' conclu√≠da em {execution_time:.2f} segundos.")


def get_file_path(folder_name):
    """
    Retorna o caminho absoluto da pasta especificada, considerando o ambiente de execu√ß√£o.

    Par√¢metros:
    - folder_name (str): Nome da pasta a ser localizada.

    Retorno:
    - (str) Caminho absoluto da pasta especificada.
    """

    # Determina o diret√≥rio base dependendo do ambiente de execu√ß√£o
    if getattr(sys, 'frozen', False):  # Se for um execut√°vel criado com PyInstaller
        base_path = os.path.dirname(sys.executable)  # Diret√≥rio do execut√°vel
        folder_path = os.path.join(base_path, "_internal", "arquivos", folder_name)  # Caminho no execut√°vel
    else:  # Se estiver rodando como script Python normal
        base_path = os.path.dirname(os.path.abspath(__file__))  # Diret√≥rio do script
        folder_path = os.path.join(base_path, "arquivos", folder_name)  # Caminho no ambiente de desenvolvimento
    
    # Verifica se a pasta existe e exibe uma mensagem
    if os.path.exists(folder_path):
        log_message(f"‚úÖ Pasta '{folder_name}' encontrada em: {folder_path}")
    else:
        log_message(f"‚ö†Ô∏è Aviso: Pasta '{folder_name}' n√£o encontrada em {folder_path}")

    return folder_path  # Retorna o caminho absoluto da pasta

def load_env_file():
    """
    Carrega o arquivo .env corretamente, seja no ambiente de desenvolvimento ou no execut√°vel.

    Retorno:
    - Nenhum retorno, apenas carrega as vari√°veis do .env para o ambiente do sistema.
    """

    # Determina o diret√≥rio base conforme o ambiente de execu√ß√£o
    if getattr(sys, 'frozen', False):  # Se estiver rodando como execut√°vel do PyInstaller
        base_path = os.path.dirname(sys.executable)  # Obt√©m o diret√≥rio do execut√°vel
        # Define o caminho do arquivo .env dentro da pasta _internal
        env_path = os.path.join(base_path, "_internal", ".env")
    else:
        base_path = os.path.dirname(os.path.abspath(__file__))  # Obt√©m o diret√≥rio do script Python
        # Define o caminho do arquivo .env no ambiente de desenvolvimento
        env_path = os.path.join(base_path, ".env")

    # Verifica se o arquivo .env existe antes de carreg√°-lo
    if os.path.exists(env_path):
        log_message(f"‚úÖ Arquivo .env carregado de: {env_path}")
        load_dotenv(env_path)  # Carrega as vari√°veis do .env para o ambiente
    else:
        log_message("‚ö†Ô∏è Aviso: Arquivo .env n√£o encontrado. Verifique o caminho.")

def send_files(driver,folder_name, action_name=""):
    """
    Envia arquivos automaticamente para uma janela de upload utilizando xdotool.

    Par√¢metros:
    - folder_name (str): Nome da pasta que cont√©m os arquivos.
    - action_name (str, opcional): Nome da a√ß√£o para fins de log.

    Retorno:
    - Nenhum retorno. Apenas executa a a√ß√£o e exibe mensagens de status.
    """

    start_time = time.time()  # Marca o tempo de in√≠cio da execu√ß√£o

    try:
        # Obt√©m o caminho absoluto da pasta onde os arquivos est√£o armazenados
        folder_path = get_file_path(folder_name)

        # Verifica se a pasta realmente existe
        if not os.path.exists(folder_path):
            log_message(f"‚ùå Erro: A pasta '{folder_name}' n√£o foi encontrada.")
            return  # Encerra a fun√ß√£o se a pasta n√£o existir

        time.sleep(1)  # Pequeno atraso antes de continuar

        files = [os.path.join(folder_path, file) for file in os.listdir(folder_path) if os.path.isfile(os.path.join(folder_path, file))]

        time.sleep(0.5)

        file_paths = "\n".join(files)
        file_input = driver.find_element(By.XPATH, "//input[@type='file' and @accept='image/*,.pdf,.zip']")
        file_input.send_keys(file_paths)

        log_message(f"‚úÖ Arquivos da pasta '{folder_name}' enviados com sucesso!")
        
        pyautogui.hotkey('alt', 'f4')  # Fecha a janela de upload

    except subprocess.CalledProcessError as e:
        log_message(f"‚ùå Erro ao executar comando xdotool: {e}")

    except Exception as e:
        log_message(f"‚ùå Ocorreu um erro: {e}")

    finally:
        # Calcula e exibe o tempo total da opera√ß√£o
        execution_time = time.time() - start_time
        log_message(f"‚è≥ A√ß√£o '{action_name}' conclu√≠da em {execution_time:.2f} segundos.")


def check_text_on_page(driver, text, timeout, check_interval=5):
    """
    Verifica continuamente se um texto espec√≠fico ainda est√° presente na p√°gina.

    Par√¢metros:
    - driver (WebDriver): Inst√¢ncia do Selenium WebDriver.
    - text (str): Texto a ser verificado na p√°gina.
    - timeout (int): Tempo m√°ximo para aguardar a remo√ß√£o do texto (em segundos).
    - check_interval (int, opcional): Intervalo entre verifica√ß√µes (padr√£o: 5 segundos).

    Retorno:
    - True: Se o texto desaparecer antes do tempo limite.
    - False: Se o texto ainda estiver presente ap√≥s o tempo limite.
    """

    start_time = time.time()  # Marca o tempo de in√≠cio da verifica√ß√£o
    log_message(f"üîç Iniciando verifica√ß√£o do texto: '{text}'")

    while True:
        try:
            # Busca elementos que cont√™m o texto desejado
            element_present = driver.find_elements(By.XPATH, f"//*[contains(text(), '{text}')]")

            # Se o texto n√£o estiver mais na p√°gina, retorna True
            if not element_present:
                log_message(f"‚úÖ O texto '{text}' desapareceu da p√°gina.")
                return False

        except Exception as e:
            log_message(f"‚ùå Erro ao verificar '{text}': {e}")
            return False

        # Se o tempo limite for atingido, retorna False
        if time.time() - start_time > timeout:
            log_message(f"‚è≥ Tempo limite atingido! O texto '{text}' ainda est√° na p√°gina.")
            return True

        # Aguarda o intervalo definido antes de verificar novamente
        time.sleep(check_interval)

def get_number(driver, identifier, identifier_type, action_name="", timeout=20):
    """
    Localiza um elemento que cont√©m uma numera√ß√£o e retorna o valor encontrado.

    Par√¢metros:
    - driver (WebDriver): Inst√¢ncia do Selenium WebDriver.
    - identifier (str): Identificador do elemento na p√°gina.
    - identifier_type (str): Tipo do identificador ('id', 'xpath', 'class_name', etc.).
    - action_name (str, opcional): Nome da a√ß√£o para fins de log.
    - timeout (int, opcional): Tempo m√°ximo para aguardar o elemento (padr√£o: 20 segundos).

    Retorno:
    - badge_number (str ou None): O n√∫mero capturado do elemento ou None se n√£o for encontrado.
    """

    start_time = time.time()  # Marca o in√≠cio da execu√ß√£o
    badge_number = None  # Inicializa a vari√°vel que armazenar√° o n√∫mero

    try:
        # Mapeia os tipos de identificadores permitidos
        by_type = {
            'id': By.ID,
            'xpath': By.XPATH,
            'class_name': By.CLASS_NAME,
            'css_selector': By.CSS_SELECTOR,
            'link_text': By.LINK_TEXT,
        }

        # Verifica se o tipo de identificador fornecido √© v√°lido
        if identifier_type not in by_type:
            raise ValueError(f"Tipo de identificador '{identifier_type}' n√£o √© suportado.")

        # Aguarda at√© que o elemento esteja presente na p√°gina
        wait = WebDriverWait(driver, timeout)
        element = wait.until(EC.presence_of_element_located((by_type[identifier_type], identifier)))

        # Captura e limpa o texto do elemento
        badge_number = element.text.strip()

        # Se o elemento estiver vis√≠vel, mas sem texto, exibe um aviso
        if not badge_number:
            log_message(f"‚ö†Ô∏è Aviso: O elemento com {identifier_type} '{identifier}' foi encontrado, mas est√° vazio.")
        else:
            log_message(f"‚úÖ Numera√ß√£o capturada: {badge_number}")

    except TimeoutException:
        # Se o tempo limite for atingido e o elemento n√£o for encontrado
        log_message(f"‚ùå Erro: O elemento com {identifier_type} '{identifier}' n√£o foi encontrado ap√≥s {timeout} segundos.")

    except NoSuchElementException:
        # Se o elemento n√£o existir na p√°gina
        log_message(f"‚ùå Erro: O elemento com {identifier_type} '{identifier}' n√£o foi encontrado.")

    except ValueError as ve:
        # Se o tipo de identificador for inv√°lido
        log_message(f"‚ùå Erro de valor: {ve}")

    except Exception as e:
        # Qualquer outro erro inesperado
        log_message(f"‚ùå Ocorreu um erro inesperado: {e}")

    finally:
        # Calcula o tempo de execu√ß√£o da a√ß√£o
        execution_time = time.time() - start_time
        log_message(f"‚è≥ A√ß√£o '{action_name}' conclu√≠da em {execution_time:.2f} segundos.")

    return badge_number  # Retorna o n√∫mero capturado (ou None se n√£o encontrado)

def identify_fields(driver):
    try:
        # Conjunto de mensagens que indicam aus√™ncia de informa√ß√µes
        library = {
            'Esse paciente n√£o possui um hist√≥rico de acompanhamento.',
            'N√£o h√° medidas a serem exibidas',
            'Nenhuma prescri√ß√£o de medicamento',
            'N√£o identificamos palavras-chaves para esse paciente.',
            'Nenhum procedimento.',
            'Nenhuma prescri√ß√£o de √≥culos',
            'Nenhuma refra√ß√£o din√¢mica',
            'Nenhuma refra√ß√£o est√°tica',
            'Nenhum exame de auto-refrator',
            'Nenhum exame de auto-ton√¥metro'
        }

        found_messages = set()  # Guarda mensagens encontradas para evitar repeti√ß√£o
        wait = WebDriverWait(driver, 5)  # Tempo m√°ximo de espera por elementos

        # Identifica e expande as se√ß√µes da p√°gina, se necess√°rio
        expansion_headers = driver.find_elements(By.TAG_NAME, "mat-expansion-panel-header")

        for expander in expansion_headers:
            state_expander = expander.get_attribute("aria-expanded")  # Verifica se est√° expandido

            if state_expander == "false":  # Se estiver fechado, expande
                log_message("Expansor fechado. Expandindo agora...")
                expander.click()
                wait.until(lambda d: expander.get_attribute("aria-expanded") == "true")  # Aguarda a expans√£o
            else:
                log_message("Expansor j√° est√° aberto.")

        # Aguarda e busca todos os textos dentro de <mat-card-content>
        content_elements = wait.until(
            EC.presence_of_all_elements_located((By.XPATH, "//mat-card-content//p"))
        )
        messages_found = []  # Lista para armazenar mensagens encontradas

        # Percorre os elementos para verificar se possuem alguma mensagem da biblioteca
        for content in content_elements:
            content_text = content.text.strip()  # Remove espa√ßos extras

            if content_text in library and content_text not in found_messages:
                found_messages.add(content_text)  # Adiciona ao conjunto para evitar duplica√ß√£o
                messages_found.append(content_text)  # Adiciona √† lista de retorno

        log_message("Processamento finalizado!")
        return messages_found  # Retorna a lista de mensagens encontradas

    except Exception as e:
        log_message(f"Ocorreu um erro: {e}")  # Captura e exibe erros durante a execu√ß√£o


def delete_patient(patient_id, action_name=""):
    """
    Realiza uma requisi√ß√£o DELETE para remover um paciente da API Voiston.

    Par√¢metros:
    - patient_id (str): ID do paciente a ser deletado.
    - action_name (str): Nome da a√ß√£o para ser registrado no log.
    """
    url_api = os.getenv('URL_API')

    # URL da API onde o paciente ser√° deletado
    url = f"{url_api}{patient_id}"

    # Obt√©m a API_KEY do ambiente (arquivo .env ou vari√°vel de ambiente do sistema)
    api_key = os.getenv("API_KEY")

    # Se a chave da API n√£o for encontrada, exibe um erro e encerra a fun√ß√£o
    if not api_key:
        log_message("Erro: API_KEY n√£o encontrada. Verifique o .env!")
        return  # Sai da fun√ß√£o sem executar a requisi√ß√£o

    # Define os headers da requisi√ß√£o HTTP
    headers = {
        "Content-Type": "application/json",  # Especifica o formato do conte√∫do
        "apiKey": api_key  # Autentica√ß√£o na API
    }

    # Registra o tempo de in√≠cio da opera√ß√£o para fins de log
    start_time = time.time()

    try:
        # Envia a requisi√ß√£o DELETE para a API
        response = requests.delete(url, headers=headers)

        # Se a requisi√ß√£o foi bem-sucedida (c√≥digo 200)
        if response.status_code == 200:
            log_message(f"‚úÖ Paciente {patient_id} deletado com sucesso!")
        else:
            # Se houve um erro na requisi√ß√£o, exibe o c√≥digo de resposta e a mensagem da API
            log_message(f"‚ùå Erro ao deletar paciente {patient_id}. C√≥digo: {response.status_code}, Resposta: {response.text}")

    except Exception as e:
        # Se houver um erro inesperado (exemplo: API fora do ar), exibe a mensagem de erro
        log_message(f"‚ùå Erro ao chamar o endpoint de dele√ß√£o: {e}")

    finally:
        # Calcula o tempo total da opera√ß√£o e registra no log
        execution_time = time.time() - start_time
        log_message(f"‚è≥ A√ß√£o '{action_name}' conclu√≠da em {execution_time:.2f} segundos")

_installed_flag = False # Vari√°vel global

def install_requirements():
    global _installed_flag

    if _installed_flag:
        log_message("‚úÖ Depend√™ncias j√° instaladas. Iniciando o teste...")
        return
    _installed_flag = True

    # Ajusta o caminho do requirements.txt corretamente
    if getattr(sys, 'frozen', False):  # Se estiver rodando como execut√°vel do PyInstaller
        base_path = sys._MEIPASS  # Diret√≥rio tempor√°rio do PyInstaller
    else:
        base_path = os.path.dirname(os.path.abspath(__file__))  # Diret√≥rio do script

    requirements_path = os.path.join(base_path, 'requirements.txt')

    if not os.path.exists(requirements_path):
        log_message(f"‚ùå Arquivo {requirements_path} n√£o encontrado!")
        sys.exit(1)

    log_message("üîç Verificando depend√™ncias...")

    # Obt√©m a lista de pacotes necess√°rios
    with open(requirements_path, "r") as req_file:
        required_packages = [line.strip() for line in req_file.readlines() if line.strip()]

    # Obt√©m a lista de pacotes j√° instalados
    installed_packages = subprocess.run([sys.executable, "-m", "pip", "freeze"], capture_output=True, text=True)
    installed_packages = installed_packages.stdout.split("\n")

    # Identifica os pacotes que ainda n√£o est√£o instalados
    missing_packages = [pkg for pkg in required_packages if not any(pkg in installed for installed in installed_packages)]

    if not missing_packages:
        log_message("‚úÖ Todas as depend√™ncias j√° est√£o instaladas. Iniciando o teste...")
        return  # Se tudo estiver instalado, n√£o abre o terminal e inicia o teste imediatamente

    log_message("‚öôÔ∏è Instalando pacotes necess√°rios...")

    python_cmd = sys.executable  # Usa o Python atual
    venv_path = os.path.join(base_path, "venv")  # Caminho do ambiente virtual
    venv_python = os.path.join(venv_path, "Scripts", "python.exe") if os.name == "nt" else os.path.join(venv_path, "bin", "python")

    # Testa se o pip est√° dispon√≠vel
    test_pip_cmd = f"{python_cmd} -m pip --version"
    result = subprocess.run(test_pip_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

    # Se pip n√£o estiver dispon√≠vel ou ambiente for restrito, cria um ambiente virtual
    if b"externally-managed-environment" in result.stderr or not shutil.which("pip"):
        log_message("‚ö†Ô∏è Ambiente do sistema restringe instala√ß√µes. Criando ambiente virtual...")

        if not os.path.exists(venv_path):
            subprocess.run(f"{python_cmd} -m venv {venv_path}", shell=True)

        python_cmd = venv_python  # Passa a usar o Python do ambiente virtual
        subprocess.run(f"{python_cmd} -m pip install --upgrade pip", shell=True)

    # Comando para instalar as depend√™ncias
    install_cmd = f"{python_cmd} -m pip install -r \"{requirements_path}\""

    # Execu√ß√£o no Windows
    if os.name == "nt":
        terminal_cmd = f'start cmd /k "{install_cmd} & timeout /t 2 & exit"'
    else:  # Linux/macOS
        terminal_cmd = f'x-terminal-emulator -e "sh -c \'{install_cmd}; sleep 2\'"'

    subprocess.run(terminal_cmd, shell=True)

    log_message("‚úÖ Instala√ß√£o conclu√≠da. Iniciando o teste...")

def extract_data(driver):
    """
    Extrai informa√ß√µes das p√°ginas de Prontu√°rios e Exames.

    Par√¢metros:
    - driver (WebDriver): Inst√¢ncia do Selenium WebDriver.

    Retorno:
    - dict: Dicion√°rio contendo os valores extra√≠dos.
    """

    time.sleep(2)  # Aguarda a p√°gina carregar os dados

    categories = {
        "prescription": "Quantidade de prescri√ß√µes encontradas no prontu√°rio",
        "procedures": "Evid√™ncias de procedimentos encontradas no prontu√°rio",
        "measurement_prontuario": "Quantidade de medidas extra√≠das do prontu√°rio",
        "measurement_exame": "Quantidade de medidas extra√≠das do exame",
        "group": "Quantidade de grupos encontrados no exame"
    }

    extracted_data = {
        "prescriptions": 0,
        "procedures": 0,
        "measurements": 0,
        "groups": 0
    }

    try:
        # Localiza todas as divs que podem conter os dados
        chips = driver.find_elements(By.CLASS_NAME, "mat-chip")

        for chip in chips:
            try:
                # Obt√©m a descri√ß√£o da categoria
                label = chip.get_attribute("aria-label").strip() if chip.get_attribute("aria-label") else ""

                value = 0  # Valor padr√£o caso n√£o seja encontrado

                # Tenta encontrar o valor no .mat-badge-content (p√°gina de Exames)
                try:
                    value_element = chip.find_element(By.CLASS_NAME, "mat-badge-content")
                    value = int(value_element.text) if value_element.text.isdigit() else 0
                except:
                    # Se n√£o encontrou .mat-badge-content, tenta pegar o n√∫mero diretamente do mat-chip
                    text_value = chip.text.strip()
                    value = int(text_value) if text_value.isdigit() else 0

                # Mapeia os valores para os campos corretos
                if label == categories["prescription"]:
                    extracted_data["prescriptions"] = value
                elif label == categories["procedures"]:
                    extracted_data["procedures"] = value
                elif label == categories["measurement_prontuario"] or label == categories["measurement_exame"]:
                    extracted_data["measurements"] += value  # Soma medidas de ambas as p√°ginas
                elif label == categories["group"]:
                    extracted_data["groups"] = value

            except Exception as e:
                log_message(f"‚ö†Ô∏è Erro ao processar um chip: {e}")

    except Exception as e:
        log_message(f"‚ùå Erro ao extrair dados da p√°gina: {e}")

    log_message(f"üìã Dados extra√≠dos - Prescri√ß√µes: {extracted_data['prescriptions']}, "
                f"Procedimentos: {extracted_data['procedures']}, "
                f"Medidas: {extracted_data['measurements']}, "
                f"Grupos: {extracted_data['groups']}")

    return extracted_data